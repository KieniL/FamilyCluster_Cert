apiVersion: apps/v1
kind: Deployment
metadata:
  name: certservice
  namespace: family
spec:
  selector:
    matchLabels:
      app:  certservice
  template:
    metadata:
      labels:
        app:  certservice
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - certservice
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - name:  certservice
        image: luke19/familycertservice:<VERSION>
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 10000
          runAsGroup: 10000
        resources:
          limits:
            memory: 512Mi
            cpu: 1000m
          requests:
            memory: 256Mi
            cpu: 150m
        env:
        - name: DB_CERT_HOST
          valueFrom:
            configMapKeyRef:
              name: family-config
              key: DB_HOST
        - name: DB_CERT_DB
          valueFrom:
            secretKeyRef:
              name: family-secret
              key: CERT_DB
        - name: DB_CERT_USER
          valueFrom:
            secretKeyRef:
              name: family-secret
              key: CERT_USER
        - name: DB_CERT_PASS
          valueFrom:
            secretKeyRef:
              name: family-secret
              key: CERT_PASS
        ports:
        - containerPort: 8080 #Expose containerport to the pod
        livenessProbe: #Check that pod is ready
          httpGet:
            path: /actuator/health/liveness #path to check
            port: 8080
          initialDelaySeconds: 10 #start checking after 30 seconds
          periodSeconds: 10 #check every 30 seconds
          failureThreshold: 10
        readinessProbe: #Check that pod is healthy
          httpGet:
            path: /actuator/health/readiness #path to check
            port: 8080 #port to check
          initialDelaySeconds: 15 #start checking after 15 seconds
          periodSeconds: 10 #check every 3 seconds
          failureThreshold: 10